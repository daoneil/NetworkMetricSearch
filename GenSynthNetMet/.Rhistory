library(GenSynthNetMet)
library(GenSynthNetMet)
devtools::load_all(".")
?load
load("~/UAH_Courses/Dissertation_Research/GenSynthNetMet/data/gaMetInputs.rda")
View(gaMetInputs)
View(gaMetInputs)
rm(gaMetInputs)
gaMetInputs <- read.csv("C:/Users/Daniel/Downloads/gaMetInputs.csv", header=FALSE, stringsAsFactors=FALSE)
View(gaMetInputs)
load("C:/Users/Daniel/Downloads/gaMetInputs.csv")
library(GenSynthNetMet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetInputs[index,1])
timelimit <- as.numeric(gaMetInputs[index,2])
fsociomatrix <- toString(gaMetInputs[index,3])
fbestmetrics <- toString(gaMetInputs[index,4])
fresults <- toString(gaMetInputs[index,5])
fsimteam <- toString(gaMetInputs[index,6])
freport <- toString(gaMetInputs[index,7])
reportTitle <- toString(gaMetInputs[index,8])
frawReport <- toString(gaMetInputs[index,9])
fRNMets <- toString(gaMetInputs[index,10])
fSynthMets <- toString(gaMetInputs[index,11])
kickoff_time <- Sys.time()
writeLines(toString(colnames(cpat)),zz)
writeLines(c(paste("population: ",iPopulationSize),
paste("sociomatrix: ",fsociomatrix),
paste("start time: ", kickoff_time),
paste("timelimit: ",timelimit, " hours"),
paste("report: ", freport)),zz)
gaMetricsSearch(iSampleNum,iPopulationSize,fsociomatrix,fbestmetrics, cpat,
fresults,fsimteam, fRNMets, fSynthMets, timelimit)
View(gaMetIns)
library(GenSynthNetMet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetInputs[index,1])
timelimit <- as.numeric(gaMetInputs[index,2])
fsociomatrix <- toString(gaMetInputs[index,3])
fbestmetrics <- toString(gaMetInputs[index,4])
fresults <- toString(gaMetInputs[index,5])
fsimteam <- toString(gaMetInputs[index,6])
freport <- toString(gaMetInputs[index,7])
reportTitle <- toString(gaMetInputs[index,8])
frawReport <- toString(gaMetInputs[index,9])
fRNMets <- toString(gaMetInputs[index,10])
fSynthMets <- toString(gaMetInputs[index,11])
kickoff_time <- Sys.time()
writeLines(toString(colnames(cpat)),zz)
writeLines(c(paste("population: ",iPopulationSize),
paste("sociomatrix: ",fsociomatrix),
paste("start time: ", kickoff_time),
paste("timelimit: ",timelimit, " hours"),
paste("report: ", freport)),zz)
gaMetricsSearch(iSampleNum,iPopulationSize,fsociomatrix,fbestmetrics, cpat,
fresults,fsimteam, fRNMets, fSynthMets, timelimit)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("data/CustomCompatibilityTable_MBTI.csv"))
library(GenSynthNetMet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("data/CustomCompatibilityTable_MBTI.csv"))
getwd()
library(GenSynthNetMet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("./results/gaMet_logfile.txt", open="a+")
library(GenSynthNetMet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("results/gaMet_logfile.txt", open="a+")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("data/CustomCompatibilityTable_MBTI.csv"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetInputs[index,1])
timelimit <- as.numeric(gaMetInputs[index,2])
fsociomatrix <- toString(gaMetInputs[index,3])
fbestmetrics <- toString(gaMetInputs[index,4])
fresults <- toString(gaMetInputs[index,5])
fsimteam <- toString(gaMetInputs[index,6])
freport <- toString(gaMetInputs[index,7])
reportTitle <- toString(gaMetInputs[index,8])
frawReport <- toString(gaMetInputs[index,9])
fRNMets <- toString(gaMetInputs[index,10])
fSynthMets <- toString(gaMetInputs[index,11])
kickoff_time <- Sys.time()
writeLines(toString(colnames(cpat)),zz)
writeLines(c(paste("population: ",iPopulationSize),
paste("sociomatrix: ",fsociomatrix),
paste("start time: ", kickoff_time),
paste("timelimit: ",timelimit, " hours"),
paste("report: ", freport)),zz)
gaMetricsSearch(iSampleNum,iPopulationSize,fsociomatrix,fbestmetrics, cpat,
fresults,fsimteam, fRNMets, fSynthMets, timelimit)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("./data/CustomCompatibilityTable_MBTI.csv"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetInputs[index,1])
timelimit <- as.numeric(gaMetInputs[index,2])
fsociomatrix <- toString(gaMetInputs[index,3])
fbestmetrics <- toString(gaMetInputs[index,4])
fresults <- toString(gaMetInputs[index,5])
fsimteam <- toString(gaMetInputs[index,6])
freport <- toString(gaMetInputs[index,7])
reportTitle <- toString(gaMetInputs[index,8])
frawReport <- toString(gaMetInputs[index,9])
fRNMets <- toString(gaMetInputs[index,10])
fSynthMets <- toString(gaMetInputs[index,11])
kickoff_time <- Sys.time()
writeLines(toString(colnames(cpat)),zz)
writeLines(c(paste("population: ",iPopulationSize),
paste("sociomatrix: ",fsociomatrix),
paste("start time: ", kickoff_time),
paste("timelimit: ",timelimit, " hours"),
paste("report: ", freport)),zz)
gaMetricsSearch(iSampleNum,iPopulationSize,fsociomatrix,fbestmetrics, cpat,
fresults,fsimteam, fRNMets, fSynthMets, timelimit)
gaMetInputs
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMets[index,1])
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetIns[index,1])
timelimit <- as.numeric(gaMetIns[index,2])
fsociomatrix <- toString(gaMetIns[index,3])
fbestmetrics <- toString(gaMetIns[index,4])
fresults <- toString(gaMetIns[index,5])
fsimteam <- toString(gaMetIs[index,6])
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(GenSynthNetMet)
zz <- file("../results/gaMet_logfile.txt", open="a+")
cpat <- as.matrix(read.csv("../data/CustomCompatibilityTable_MBTI.csv"))
gaMetIns <- as.data.frame(read.csv("../data/gaMetInputs.csv",header=FALSE))
index <- 9      # Row number from which to retrieve parameters.
iSampleNum <- 40     # number of networks to generate
iPopulationSize <- as.numeric(gaMetIns[index,1])
timelimit <- as.numeric(gaMetIns[index,2])
fsociomatrix <- toString(gaMetIns[index,3])
fbestmetrics <- toString(gaMetIns[index,4])
fresults <- toString(gaMetIns[index,5])
fsimteam <- toString(gaMetIns[index,6])
freport <- toString(gaMetIns[index,7])
reportTitle <- toString(gaMetIns[index,8])
frawReport <- toString(gaMetIns[index,9])
fRNMets <- toString(gaMetIns[index,10])
fSynthMets <- toString(gaMetIns[index,11])
kickoff_time <- Sys.time()
writeLines(toString(colnames(cpat)),zz)
writeLines(c(paste("population: ",iPopulationSize),
paste("sociomatrix: ",fsociomatrix),
paste("start time: ", kickoff_time),
paste("timelimit: ",timelimit, " hours"),
paste("report: ", freport)),zz)
gaMetricsSearch(iSampleNum,iPopulationSize,fsociomatrix,fbestmetrics, cpat,
fresults,fsimteam, fRNMets, fSynthMets, timelimit)
rpt <- as.data.frame(read.csv(fbestmetrics))
write.table(rpt,file=frawReport)
fmtbl <- generateTable(rpt,reportTitle)
writeLines(fmtbl,freport)             # Write the HTML file
integratedReport <- file("../results/gaIntegratedReport.html", open="a+")
writeLines(fmtbl,integratedReport)
writeLines("<p></p><br><hr>",integratedReport)
completion_time <- Sys.time()
writeLines(c(paste("end time: ", completion_time),"-----------------------"),zz)
close(zz)
close(integratedReport)
getOption("repos")
installed.packages()
install.packages("igraph","htmltools","htmlwidgets","knitr")
install.packages(c("igraph", "knitr", "htmltools", "htmlwidgets"))
installed.packages()
version(knitr)
install.packages("formattable")
library(GenSynthNetMet)
../results/gaMetReport_RobinsBank.html
getwd()
results/gaMetReport_RobinsBank.html
list.files()
./results/gaMetReport_RobinsBank.html
fmtbl
install.packages("kableExtra")
kableExtra::kable(fmtbl)
htmltools::browsable(fmtbl)
htmltools::browsable(fmtbl)
htmltools::browsable(fmtbl,value=FALSE)
document()
rmarkdown::pandoc_available()
Help(Dataset_Robins_Australian_Bank)
?Robins_Australian_Bank.txt
manpath
manpath <- past0(getwd(),"/man")
manpath <- paste0(getwd(),"/man")
?Dataset_Robins_Australian_Bank
?makeMBTI
install.packages("roxygen2")
?Dataset_Robins_Australian_Bank
?Robins_Australian_Bank.txt
?Robins_Australian_Bank
?Dataset_Robins_Australian_Bank
library(GenSynthNetMet)
?Robins_Australian_Bank
?Dataset_Robins_Australian_Bank
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
devtools::use_vignette("executeMCSearch")
system("R CMD Rd2pdf .")
